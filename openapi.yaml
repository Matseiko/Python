openapi: 3.0.1
info:
  title: Car rental
  description: Car rental service REST API
  contact:
        name:  Ira
        email: iryna.matseiko.knm.2019@lpnu.ua
  version: 1.0.0
servers:
  - url: 'https://сar_rental.swagger.io/api/v2'
  - url: 'http://сar_rental.swagger.io/api/v2'

tags:
- name: auth
  description: API authorization
- name: user
  description: Operations with users
- name: car
  description: Operations with car
- name: booking
  description: Car booking

paths:
  /auth:
    post:
      tags:
        - auth
      summary: 'Authenticates a user, returns the user level'
      operationId: getUserLevel
      requestBody:
        description: Personal information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/personal_information'
        required: true
      responses:
        '200':
          description: User level
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_level'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  /user:
    post:
      tags:
        - user 
      description: Operations with users
      summary: Operations with users
      operationId: createuser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_user'
      responses:
        '300':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
      - car_auth:
        - write:passenger
        - read:passenger
      - api_key: [ ]
  /user/administrator:
    post:
      tags:
        - user
      summary: Admin
      operationId: createadmin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_user'
      responses:
        '300':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
      - car_auth:
        - write:passenger
        - read:passenger
        - write:administrator
        - read:administrator
      - api_key: [ ]
  '/user/{id_user}':
    get:
      tags:
        - user
      summary: Get user data
      operationId: getdata
      parameters:
        - name: id_user
          in: path
          required: true
          schema:
            type: string
      responses:
        '301':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          description: User is not authorized
          content: {}
        '401':
          description: Only administrator can do that
          content: {}
        '402':
          description: User not found
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
      - car_auth:
        - read:passenger
      - api_key: [ ]
    put:
      tags:
        - user
      summary: Update user data
      operationId: Updatedata 
      parameters:
        - name: id_user
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_user'
      responses:
        '301':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          description: User is not authorized
          content: {}
        '401':
          description: Only administrator can do that
          content: {}
        '402':
          description: User not found
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
      - car_auth:
        - write:passenger
        - read:passenger
      - api_key: [ ]
    delete:
      tags:
        - user
      summary: Delete user
      operationId: deleteuser 
      parameters:
        - name: id_user
          in: path
          required: true
          schema:
            type: string
      responses:
        '400':
          description: User is not authorized
          content: {}
        '401':
          description: Only administrator can do that
          content: {}
        '402':
          description: User not found
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
        - car_auth:
          - write:administrator
          - read:administrator
        - api_key: [ ]
  /car:
    post:
      tags:
        - car
      summary: Add a new car
      operationId: addcar
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_car'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/car'
        '400':
          description: User is not authorized
          content: {}
        '401':
          description: Only administrator can do that
          content: {}
        '402':
          description: User not found
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
      - car_auth:
        - write:administrator
        - read:administrator
      - api_key: [ ]
    get:
      tags:
        - car
      summary: Get a car
      operationId: getcar
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/car'
                nullable: false
        '403':
          description: Car not found
          content: {}
        '402':
          description: User not found
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
      - car_auth:
        - write:administrator
        - read:administrator
      - api_key: [ ]
  '/car/{id_car}':
    get:
      tags:
        - car
      summary: Get the car with such id
      operationId: getcarid
      parameters:
        - name: id_car
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/car'
        '401':
          description: Only administrator can do that
          content: {}
        '403':
          description: Car not found
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
      - car_auth:
        - write:administrator
        - read:administrator
      - api_key: [ ]
    put:
      tags:
        - car
      summary: Update the car with such id
      operationId: Updatecar
      parameters:
        - name: id_car
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_car'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/car'
        '400':
          description: User is not authorized
          content: {}
        '401':
          description: Only administrator can do that
          content: {}
        '402':
          description: User not found
          content: {}
        '403':
          description: Car not found
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
      - car_auth:
        - write:administrator
        - read:administrator
      - api_key: [ ]
    delete:
      tags:
        - car
      summary: Delete the car with such id
      operationId: deletecar 
      parameters:
        - name: id_car
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content: {}
        '400':
          description: User is not authorized
          content: {}
        '401':
          description: Only administrator can do that
          content: {}
        '402':
          description: User not found
          content: {}
        '403':
          description: Car not found
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
        - car_auth:
          - write:administrator
          - read:administrator
        - api_key: [ ]
  /booking:
    post:
      tags:
        - booking
      summary: Create a new booking
      operationId: creatbooking 
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_booking'
        required: true
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/booking'
        '400':
          description: User is not authorized
          content: {}
        '402':
          description: User not found
          content: {}
        '403':
          description: Car not found
          content: {}
        '404':
          description: Only passenger can do that
          content: {}
        '405':
          description: The car was booked by another user
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
      - car_auth:
        - read:passenger
      - api_key: [ ]

components:
  schemas:
    personal_information:
      required:
        - login
        - password
      type: object
      properties:
        login:
          type: string
        password:
          type: string

    user_level:
      required:
        - user_level
      type: object
      properties:
        user_level:
          type: string
    user:
      type: object
      properties:
        id:
          type: string
        first name:
          type: string
        last name:
          type: string
        birthday:
          type: string
          format: date
        email:
          type: string
        phone:
          type: integer
        role:
          type: string
      nullable: false
    car:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        brand:
          type: string
        release date:
          type: integer
          format: date
        color:
          type: string
        speed:
          type: integer
        price:
          type: number
          format: float
      nullable: false
    booking:
      type: object
      properties:
        user id:
          type: string
        car id:
          type: string
        booking from:
          type: integer
          format: date
        booking until:
          type: integer
          format: date
        id:
          type: string
      nullable: false
    create_user:
      type: object
      properties:
        first name:
          type: string
        last name:
          type: string
        birthday:
          type: string
          format: date
        email:
          type: string
        phone:
          type: integer
        role:
          type: string
      nullable: false
    create_car:
      type: object
      properties:
        name:
          type: string
        brand:
          type: string
        release date:
          type: integer
          format: date
        color:
          type: string
        speed:
          type: integer
        price:
          type: number
          format: float
      nullable: false
    create_booking:
      type: object
      properties:
        user id:
          type: string
        car id:
          type: string
        booking from:
          type: integer
          format: date
        booking until:
          type: integer
          format: date
      nullable: false
    error:
      required:
        - code
      type: object
      properties:
        code:
          type: integer
        message:
          type: string

            
  securitySchemes:
    car_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://car.swagger.io/oauth/dialog
          scopes:
            write:passenger: modify user in your account
            read:passenger: read your pets
            write:administrator: modify user in your account
            read:administrator: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
